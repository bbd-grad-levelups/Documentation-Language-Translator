@page "/"
@using System.Text.Json
@using DocTranslatorServer.Models
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>DONDE ESTA LA BIBLIOTECA!!!</PageTitle>

@* <button @onclick="ShowPopup">Popup</button> *@

<div class="mainDiv">
	@if (showLoggedIn) {
		<div class="inputDiv">
			<div class="smallContainer">
				<h2>Upload content!</h2>
				<p>Paste your document contents in the box on the right to translate!</p>
				<label for="docName">Document name:</label>
				<input type="text" id="docName" name="docName" class="textInput" @bind-value="newDocumentName">

				<label for="inputLanguage"> Select input langauge:</label>
				<select id="inputLanguage" name="inputLanguage" @bind="inputLanguage" @bind:event="onchange">
					@foreach(var l in languages)
					{
						<option value=@l.LanguageID>@l.Language</option>
					}
				</select>

				<label for="outputLanguage"> Select output langauge:</label>
				<select id="outputLanguage" name="outputLanguage" @bind="outputLanguage" @bind:event="onchange">
					@foreach(var l in languages)
					{
						<option value=@l.LanguageID>@l.Language</option>
					}
				</select>

				<p></p>
				<button @onclick="UploadDocument">Upload!</button>
			</div>

			<div class="smallContainer">
				<h2>View a file!</h2>
				<label> Select the file you want to view:</label>
				<select name="userFile" @bind="documentID" @bind:event="onchange">
					@foreach(var currDoc in Documents)
					{
						<option value=@currDoc.DocumentID>@currDoc.DocumentName</option>
					}
				</select>
				<button @onclick="ViewFile">View file</button>
			</div>
		</div>

		<div class="viewDiv">
			<h4>File Content:</h4>
			<textarea class="inputContent" @bind="fileContent" @bind:event="oninput" />
		</div>
	} else {
		<div>
			<h1>We will log you in momentarily, if this doesn't happen within a few seconds please reload the page :)</h1>
		</div>
	}
	
</div>

@if(showPopup)
{
	<div class="popup-overlay" @onclick="ClosePopup">
		<div class="popup">
			<div class="popup-content">
				<p>@this.messageInfo</p>
			</div>
		</div>
	</div>
}


@code {
	bool showPopup = false;

	void ShowPopup()
	{
		showPopup = true;
	}

	void ClosePopup()
	{
		showPopup = false;
	}

	// OAuth:
	private static string scopes = "profile email";
	private static string redirectUri = "";
	private static string clientId = "";
	private static string clientSecret = "";
	private string code = "";
	private string? accessToken = null;
	private string? idToken = null;
	private bool showLoggedIn;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		// OAuth stuff:
		if (firstRender) {
			showLoggedIn = false;
			accessToken = await JS.InvokeAsync<string>("localStorage.getItem", "accessToken");
			idToken = await JS.InvokeAsync<string>("localStorage.getItem", "idToken");

			if (clientId == "") {
				ReadSecrets();
			}

			if (accessToken != null && idToken != null) {
				SetUpDropDowns();
			} else {
				var uri = new Uri(NavigationManager.Uri);
				var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

				if (queryParams["code"] != null) {
					
					code = queryParams["code"];

					await GetTokens();
					
					SetUpDropDowns();

				} else {
					string url = await GetCode();

					Console.WriteLine(url);

					NavigationManager.NavigateTo(url);
				}
			}
		}

	}

	private async void SetUpDropDowns() {
		try
		{
			languages = await getLanguages();
			Documents = await getDocumentNames();

			if ((inputLanguage == null || outputLanguage == null) && languages.Count > 0) {
				inputLanguage = languages.FirstOrDefault().Language;
				outputLanguage = languages.FirstOrDefault().Language;
			}
			
			if (documentID < 0 && Documents.Count > 0) {
				documentID = Documents.FirstOrDefault().DocumentID;
			}
			
			showLoggedIn = true;
			StateHasChanged();
		}
		catch(Exception ex)
		{
			languages = new List<Languages> {  };
			inputLanguage = "";
			outputLanguage = "";

			Documents = new List<Document> { };
			documentID = 0;
		}
	}

	private void ReadSecrets()
	{
		try
		{
			using(StreamReader reader = new StreamReader("Components\\Pages\\client_secrets.json"))
			{
				string json = reader.ReadToEnd();
				JsonDocument document = JsonDocument.Parse(json);
				JsonElement root = document.RootElement;
				clientId = root.GetProperty("web").GetProperty("client_id").GetString();
				clientSecret = root.GetProperty("web").GetProperty("client_secret").GetString();
				redirectUri = root.GetProperty("web").GetProperty("redirect_uri").GetString();
			}
			Console.WriteLine("Successfully read in Json");
		}
		catch
		{
			Console.WriteLine("Error Reading in Json");
		}
	}

	private async Task GetTokens()
	{
		string tokenEndpoint = "https://oauth2.googleapis.com/token";

		var tokenRequestContent = new FormUrlEncodedContent(new[]
		{
			new KeyValuePair<string, string>("code", code),
			new KeyValuePair<string, string>("client_id", clientId),
			new KeyValuePair<string, string>("client_secret", clientSecret),
			new KeyValuePair<string, string>("redirect_uri", redirectUri),
			new KeyValuePair<string, string>("grant_type", "authorization_code")
		});

		using(var client = new HttpClient())
		{
			
			var response = await client.PostAsync(tokenEndpoint, tokenRequestContent);
			if(response.IsSuccessStatusCode)
			{
				var content = await response.Content.ReadAsStringAsync();
				Console.WriteLine("Success");
				JsonDocument jsonDoc = JsonDocument.Parse(content);
				if(jsonDoc.RootElement.TryGetProperty("access_token", out JsonElement accessTokenElement) &&
					jsonDoc.RootElement.TryGetProperty("id_token", out JsonElement idTokenElement))
				{
					//Console.WriteLine("Writing tokens");
					//Console.WriteLine(accessTokenElement);
					
					accessToken = accessTokenElement.GetString();
					idToken = idTokenElement.GetString();
					await JS.InvokeVoidAsync("localStorage.setItem", "accessToken", accessToken);
					await JS.InvokeVoidAsync("localStorage.setItem", "idToken", idToken);
				}
				else
				{
					Console.WriteLine("Failed to parse JSON");
				}
			}
			else
			{
				Console.WriteLine("Failure");
			}
		}
	}

	private async Task<string> GetCode()
	{
		var urlBuilder = new UriBuilder("https://accounts.google.com/o/oauth2/v2/auth");
		var queryParameters = new Dictionary<string, string>()
		{
			["client_id"] = clientId,
			["redirect_uri"] = redirectUri,
			["scope"] = scopes,
			["response_type"] = "code",
			["access_type"] = "offline"
		};

		urlBuilder.Query = string.Join("&", queryParameters.Select(kvp => $"{kvp.Key}={Uri.EscapeDataString(kvp.Value)}"));

		return urlBuilder.ToString();
	}
}