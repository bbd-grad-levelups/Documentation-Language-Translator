@page "/"
@using System.Text.Json
@using DocTranslatorServer.Models
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>DONDE ESTA LA BIBLIOTECA!!!</PageTitle>

@* <button @onclick="ShowPopup">Popup</button> *@

<div class="mainDiv">
	<div class="inputDiv">
		<div class="smallContainer">
			<h2>Upload content!</h2>
			<p>Paste your document contents in the box on the right to translate!</p>
			<label for="docName">Document name:</label>
			<input type="text" id="docName" name="docName" class="textInput" @bind-value="newDocumentName">

			<label for="inputLanguage"> Select input langauge:</label>
			<select id="inputLanguage" name="inputLanguage" @bind="inputLanguage" @bind:event="onchange">
				@foreach(var l in languages)
				{
					<option value=@l.LanguageID>@l.Language</option>
				}
			</select>

			<label for="outputLanguage"> Select output langauge:</label>
			<select id="outputLanguage" name="outputLanguage" @bind="outputLanguage" @bind:event="onchange">
				@foreach(var l in languages)
				{
					<option value=@l.LanguageID>@l.Language</option>
				}
			</select>

			<p></p>
			<button @onclick="UploadDocument">Upload!</button>
		</div>

		<div class="smallContainer">
			<h2>View a file!</h2>
			<label> Select the file you want to view:</label>
			<select name="userFile" @bind="documentID" @bind:event="onchange">
				@foreach(var currDoc in Documents)
				{
					<option value=@currDoc.DocumentID>@currDoc.DocumentName</option>
				}
			</select>
			<button @onclick="ViewFile">View file</button>
		</div>
	</div>

	<div class="viewDiv">
		<h4>File Content:</h4>
		<textarea class="inputContent" @bind="fileContent" @bind:event="oninput" />
	</div>
</div>

@if(showPopup)
{
	<div class="popup-overlay" @onclick="ClosePopup">
		<div class="popup">
			<div class="popup-content">
				<p>@this.messageInfo</p>
			</div>
		</div>
	</div>
}


@code {
	bool showPopup = false;

	void ShowPopup()
	{
		showPopup = true;
	}

	void ClosePopup()
	{
		showPopup = false;
	}

	// OAuth:
	private static string scopes = "profile email";
	private static string redirectUri = "";
	private static string clientId = "";
	private static string clientSecret = "";
	private string code = "";
	private string accessToken = "";
	private string idToken = "";

	protected override async Task OnInitializedAsync()
	{
		// OAuth stuff:
		if(clientId == "")
		{
			ReadSecrets();

			if(clientId != "")
			{
				string url = await GetCode();

				Console.WriteLine(url);

				NavigationManager.NavigateTo(url);

				await Task.Delay(5000);
			}
		}
		else if(clientId != "" && idToken == "")
		{
			var uri = new Uri(NavigationManager.Uri);
			var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

			if(queryParams["code"] != null)
			{
				code = queryParams["code"];

				//Console.WriteLine("This is the auth code:");
				//Console.WriteLine(code);

				await GetTokens();

				//Console.WriteLine("ID Token");
				//Console.WriteLine(idToken);
				//Console.WriteLine("Access Token");
				//Console.WriteLine(accessToken);
			}
			else
			{
				Console.WriteLine("Unable to extract auth code");
			}
		}
		else if(idToken != "")
		{
			//Console.WriteLine("Already logged in");
			//Console.WriteLine(idToken);
		}
		else
		{
			Console.WriteLine("Unable to login");
		}

		// Web UI stuff:
		try
		{
			languages = await getLanguages();
			inputLanguage = languages.FirstOrDefault().Language;
			outputLanguage = languages.FirstOrDefault().Language;

			Documents = await getDocumentNames();
			documentID = Documents.FirstOrDefault().DocumentID;
		}
		catch(Exception ex)
		{
			languages = new List<Languages> {  };
			inputLanguage = languages.FirstOrDefault().Language;
			outputLanguage = languages.FirstOrDefault().Language;

			Documents = new List<Document> { };
			documentID = Documents.FirstOrDefault().DocumentID;
		}
	}

	private void ReadSecrets()
	{
		try
		{
			using(StreamReader reader = new StreamReader("Components\\Pages\\client_secrets.json"))
			{
				string json = reader.ReadToEnd();
				JsonDocument document = JsonDocument.Parse(json);
				JsonElement root = document.RootElement;
				clientId = root.GetProperty("web").GetProperty("client_id").GetString();
				clientSecret = root.GetProperty("web").GetProperty("client_secret").GetString();
				redirectUri = root.GetProperty("web").GetProperty("redirect_uri").GetString();
			}
			Console.WriteLine("Successfully read in Json");
		}
		catch
		{
			Console.WriteLine("Error Reading in Json");
		}
	}

	private async Task GetTokens()
	{
		var tokenRequest = new HttpRequestMessage(HttpMethod.Post, "https://oauth2.googleapis.com/token")
		{
			Content = new FormUrlEncodedContent(new Dictionary<string, string>
			{
				["code"] = code,
				["client_id"] = clientId,
				["client_secret"] = clientSecret,
				["redirect_uri"] = redirectUri,
				["grant_type"] = "authorization_code"
			})
		};

		using(var client = new HttpClient())
		{
			var response = await client.SendAsync(tokenRequest);
			if(response.IsSuccessStatusCode)
			{
				var content = await response.Content.ReadAsStringAsync();
				Console.WriteLine("Success");
				JsonDocument jsonDoc = JsonDocument.Parse(content);
				if(jsonDoc.RootElement.TryGetProperty("access_token", out JsonElement accessTokenElement) &&
					jsonDoc.RootElement.TryGetProperty("id_token", out JsonElement idTokenElement))
				{
					//Console.WriteLine("Writing tokens");
					//Console.WriteLine(accessTokenElement);
					accessToken = accessTokenElement.GetString();
					idToken = idTokenElement.GetString();
				}
				else
				{
					Console.WriteLine("Failed to parse JSON");
				}
			}
			else
			{
				Console.WriteLine("Failure");
			}
		}
	}

	private async Task<string> GetCode()
	{
		var urlBuilder = new UriBuilder("https://accounts.google.com/o/oauth2/v2/auth");
		var queryParameters = new Dictionary<string, string>()
		{
			["client_id"] = clientId,
			["redirect_uri"] = redirectUri,
			["scope"] = scopes,
			["response_type"] = "code",
			["access_type"] = "offline"
		};

		urlBuilder.Query = string.Join("&", queryParameters.Select(kvp => $"{kvp.Key}={Uri.EscapeDataString(kvp.Value)}"));

		return urlBuilder.ToString();
	}
}